<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Home on Prestashop Developer Documentation</title>
    <link>http://devdocs.prestashop.com/</link>
    <description>Recent content in Home on Prestashop Developer Documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 19 Feb 2018 20:03:41 +0100</lastBuildDate>
    
	<atom:link href="http://devdocs.prestashop.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Configuration</title>
      <link>http://devdocs.prestashop.com/1.7/modules/concepts/configuration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://devdocs.prestashop.com/1.7/modules/concepts/configuration/</guid>
      <description>Configuration Data can be saved in the shop database without requiring a module specific table to be created.
The table configuration contains a list of key =&amp;gt; value(s) properties which can be accessed from anywhere, including in a module. The Configuration class is the interface allowing each module developer to get or store data in this table.
Store configuration data Configuration::updateValue(string $key, mixed $value);  $key will be the reference to your data to reuse later.</description>
    </item>
    
    <item>
      <title>DBQuery class</title>
      <link>http://devdocs.prestashop.com/1.7/development/database/dbquery/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://devdocs.prestashop.com/1.7/development/database/dbquery/</guid>
      <description>The DBQuery class The DBQuery class is a query builder which helps you create SQL queries. For instance:
$sql = new DbQuery(); $sql-&amp;gt;select(&#39;*&#39;); $sql-&amp;gt;from(&#39;cms&#39;, &#39;c&#39;); $sql-&amp;gt;innerJoin(&#39;cms_lang&#39;, &#39;l&#39;, &#39;c.id_cms = l.id_cms AND l.id_lang = &#39;.(int)$id_lang); $sql-&amp;gt;where(&#39;c.active = 1&#39;); $sql-&amp;gt;orderBy(&#39;position&#39;); return Db::getInstance()-&amp;gt;executeS($sql);  Main methods __toString() : Generate and get the query.
build() : Generate and get the query (return a string).
from(string $table, mixed $alias = null) : Set table for FROM clause.</description>
    </item>
    
    <item>
      <title>Guidelines and coding standards</title>
      <link>http://devdocs.prestashop.com/1.7/themes/guidelines/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://devdocs.prestashop.com/1.7/themes/guidelines/</guid>
      <description>Guidelines and coding standards Compatibility PHP Code Your PHP code should be compatible with the following versions:
 PrestaShop 1.7.0  ~ 1.7.3  : at least PHP 5.4 PrestaShop 1.7.4  : at least PHP 5.6  HTML / CSS / Javascript Your HTML/CSS/JS code should work with at least:
 IE9+ Edge Firefox 45 Chrome 29.  Mobile-wise:
 iOS 8.4 Android Browser 4.4  Standards General Use spaces for indentation in every language (PHP, HTML, CSS, etc.</description>
    </item>
    
    <item>
      <title>Why write documentation</title>
      <link>http://devdocs.prestashop.com/1.7/documentation/why/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://devdocs.prestashop.com/1.7/documentation/why/</guid>
      <description>Why write technical documentation?  The best documentation is no documentation: code should be self-explanatory.
All the lazy developers in history
 Writing documentation is hard.
We try to find excuses and rationalize and lie to ourselves so we can feel better about with the fact that we should be doing it, but it&amp;rsquo;s &amp;ldquo;too much work&amp;rdquo;.
Here are two good reasons to try and convince you to start writing documentation, and help you while you help others, too:</description>
    </item>
    
    <item>
      <title>Folder structure</title>
      <link>http://devdocs.prestashop.com/1.7/modules/creation/module_file_structure/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://devdocs.prestashop.com/1.7/modules/creation/module_file_structure/</guid>
      <description>Module file structure A module is made of a lot of files, all stored in a folder that bears the same name as the module, that folder being in turn stored in the /modules folder at the root of the main PrestaShop folder: /modules/&amp;lt;name_of_the_module&amp;gt;/.
Here are the possible files and folders for a PrestaShop 1.7 module:
➜ module tree -L 3 . ├── config │ └── services.yml ├── config.xml ├── controllers ├── logo.</description>
    </item>
    
    <item>
      <title>Front controllers</title>
      <link>http://devdocs.prestashop.com/1.7/modules/concepts/controllers/front_controllers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://devdocs.prestashop.com/1.7/modules/concepts/controllers/front_controllers/</guid>
      <description>Front controllers These class are accessible from the front-office and add features to the customers.
Creating a front controller In order to have a front controller read by PrestaShop, these 3 rules have to be followed:
 it is stored in the subfolder controllers/front/ of the module. in CamelCase, the class name follows this format: &amp;lt;ModuleName&amp;gt;&amp;lt;FileName&amp;gt;ModuleFrontController. it extends the class ModuleFrontController.  Minimum controller example Let&amp;rsquo;s say we want a controller responsible of payments validation in our module cheque.</description>
    </item>
    
    <item>
      <title>How to contribute</title>
      <link>http://devdocs.prestashop.com/1.7/documentation/how/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://devdocs.prestashop.com/1.7/documentation/how/</guid>
      <description>How to contribute to PrestaShop&amp;rsquo;s documentation TL;DR – Contributing is super easy! Edit any page by clicking on the &amp;ldquo;Improve this page&amp;rdquo; link at the top right corner of your screen.
Getting started There are two ways to contribute to this documentation:
Edit on GitHub You can pretty much everything directly on GitHub! Click on the &amp;ldquo;Improve this page&amp;rdquo; at the top right of the page you want to edit.</description>
    </item>
    
    <item>
      <title>List of hooks</title>
      <link>http://devdocs.prestashop.com/1.7/modules/concepts/hooks/list_of_hooks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://devdocs.prestashop.com/1.7/modules/concepts/hooks/list_of_hooks/</guid>
      <description>List of hooks in PrestaShop 1.7 Update notes A couple of hooks were modified between 1.7.0.x and 1.7.1.x.
 actionDeleteProductInCartAfter has been divided into two hooks:  actionObjectProductInCartDeleteBefore. actionObjectProductInCartDeleteAfter.  displayProductButtons has been renamed into displayProductAdditionalInfo.
Don’t worry, we kept an alias :)  Full list  action&amp;lt;AdminControllerName&amp;gt;&amp;lt;Action&amp;gt;After Called after performing &amp;lt;Action&amp;gt; in any &amp;lt;AdminController&amp;gt;
Located in: /classes/controller/AdminController.php
Parameters:
array( &#39;controller&#39; =&amp;gt; (AdminController), &#39;return&#39; =&amp;gt; (mixed) );  action&amp;lt;AdminControllerName&amp;gt;&amp;lt;Action&amp;gt;Before Called before performing &amp;lt;Action&amp;gt; in any &amp;lt;AdminController&amp;gt;</description>
    </item>
    
    <item>
      <title>ObjectModel class</title>
      <link>http://devdocs.prestashop.com/1.7/development/database/objectmodel/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://devdocs.prestashop.com/1.7/development/database/objectmodel/</guid>
      <description>The ObjectModel class When needing to dive deep, you have to use the ObjectModel class. This is the main object of PrestaShop’s object model. It can be overridden… with precaution.
It is an Active Record kind of class (see: http://en.wikipedia.org/wiki/Active_record_pattern). The table attributes or view attributes of PrestaShop’s database are encapsulated in this class. Therefore, the class is tied to a database record. After the object has been instantiated, a new record is added to the database.</description>
    </item>
    
    <item>
      <title>Database structure</title>
      <link>http://devdocs.prestashop.com/1.7/development/database/structure/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://devdocs.prestashop.com/1.7/development/database/structure/</guid>
      <description>Maintaining the database Database structure definition Global definition The database structure of PrestaShop can be found in install/data/db_structure.sql (1.7.3.x releases example).
It is used one time, during the installation of PrestaShop. It contains the structure of almost all tables. If a table needs to be added or modified, this the file you should open.
Table in DB but not in db_structure.sql With PrestaShop 1.7, some tables have been migrated to doctrine entities (i.</description>
    </item>
    
    <item>
      <title>Use hooks on modern pages</title>
      <link>http://devdocs.prestashop.com/1.7/modules/concepts/hooks/use_hooks_on_modern_pages/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://devdocs.prestashop.com/1.7/modules/concepts/hooks/use_hooks_on_modern_pages/</guid>
      <description>Use hooks on modern pages You know you can already customize your PrestaShop store thanks to many hooks: the good news is that you can still use hooks like you did in the earlier versions of PrestaShop in modern pages.
Starting from PrestaShop 1.7.3, you can access the modern Services Container into your modules and so on access powerful and customizable features available in Symfony:
 Twig, the most popular templating engine; Swiftmailer, a feature-rich mailer; Doctrine ORM and Doctrine DBAL to manage your database; Filesystem and Finder libraries to manage all filesystem operations; Monolog for every logging operations; Serializer library for whom who need to manipulate Json and Xml formats&amp;hellip;  Of course, you also have access to every service used by the Core of PrestaShop.</description>
    </item>
    
    <item>
      <title>Widgets</title>
      <link>http://devdocs.prestashop.com/1.7/modules/concepts/widgets/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://devdocs.prestashop.com/1.7/modules/concepts/widgets/</guid>
      <description>Widgets Widget is an advanced concept introduced on PrestaShop 1.7, extending hooks feature.
Limitation of hooks In their basic use, a display hook will be shown at a specific place in the template. If a module wants to display the same additional content on several places, whatever the merchant chose, it still has to register and implement all the possible hooks.
With widgets, module developers can display content everywhere the module is asked to do so.</description>
    </item>
    
    <item>
      <title>Adding a configuration page</title>
      <link>http://devdocs.prestashop.com/1.7/modules/creation/adding_configuration_page/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://devdocs.prestashop.com/1.7/modules/creation/adding_configuration_page/</guid>
      <description>Adding a configuration page Your module can get a &amp;ldquo;Configure&amp;rdquo; link in the back office module list, and therefore let the user change some settings. This &amp;ldquo;Configure&amp;rdquo; link appears with addition of the getContent() method to your main class. This is a standard PrestaShop method: its sole existence sends a message to the back office, saying &amp;ldquo;there&amp;rsquo;s a configuration page in this module, display the configuration link&amp;rdquo;.
But having a getContent() public method in the MyModule object does only make the &amp;ldquo;Configure&amp;rdquo; link appear; it does not create the configuration page out of nowhere.</description>
    </item>
    
    <item>
      <title>Alter forms on modern pages</title>
      <link>http://devdocs.prestashop.com/1.7/modules/concepts/hooks/alter_forms_on_modern_pages/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://devdocs.prestashop.com/1.7/modules/concepts/hooks/alter_forms_on_modern_pages/</guid>
      <description>Alter forms on modern pages One of the most common tasks for the PrestaShop developers is to alter the data and make it manageable for customers. In PrestaShop 1.6, a specific Form framework was created to help developers. In PrestaShop 1.7, the system has changed as we now rely on the Symfony Form component.
Let&amp;rsquo;s see an example on how to add, populate, validate and persist a new form field in PrestaShop 1.</description>
    </item>
    
    <item>
      <title>Displaying content on the front office</title>
      <link>http://devdocs.prestashop.com/1.7/modules/creation/displaying_content_in_front_office/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://devdocs.prestashop.com/1.7/modules/creation/displaying_content_in_front_office/</guid>
      <description>Displaying content on the front office As it is, the module does not do much. In order to display something on the front office, we have to add support for a few hooks. This is done by implementing the hooks&amp;rsquo; methods, and that was actually done in the install() method we wrote earlier, using the registerHook() method:
public function install() { if (Shop::isFeatureActive()) { Shop::setContext(Shop::CONTEXT_ALL); } return parent::install() &amp;amp;&amp;amp; $this-&amp;gt;registerHook(&#39;leftColumn&#39;) &amp;amp;&amp;amp; $this-&amp;gt;registerHook(&#39;header&#39;) &amp;amp;&amp;amp; Configuration::updateValue(&#39;MYMODULE_NAME&#39;, &#39;my friend&#39;); }  As you can see, we make it so that the module is hooked to the &amp;ldquo;leftColumn&amp;rdquo; and &amp;ldquo;header&amp;rdquo; hooks.</description>
    </item>
    
    <item>
      <title>Introduction</title>
      <link>http://devdocs.prestashop.com/1.7/basics/introduction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://devdocs.prestashop.com/1.7/basics/introduction/</guid>
      <description>Fundamentals of PrestaShop Development PrestaShop was conceived so that third-party modules could easily build upon its foundations, making it an extremely customizable e-commerce software.
PrestaShop’s customization is based on three possibilities:
 Themes, Modules, Overriding.  Themes are explored in full in the Designer Guide.
Modules and the override system are explored in this Developer Guide, starting with the “Concepts” section below. You can learn more about each in the following chapters:</description>
    </item>
    
    <item>
      <title>Overrides</title>
      <link>http://devdocs.prestashop.com/1.7/modules/concepts/overrides/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://devdocs.prestashop.com/1.7/modules/concepts/overrides/</guid>
      <description>Overrides Overriding is a way to &amp;ldquo;override&amp;rdquo; class files and controller files. PrestaShop&amp;rsquo;s ingenious class auto-loading function makes the &amp;ldquo;switch&amp;rdquo; to other files fairly simple. Thanks to PrestaShop&amp;rsquo;s fully object-oriented code, you can rely on object inheritance to modify and add new behaviors, using the properties and methods of the various existing classes.
Important note There are limitations and risks of using overrides. Keep them for your own shop.</description>
    </item>
    
    <item>
      <title>Enabling the Auto-Update</title>
      <link>http://devdocs.prestashop.com/1.7/modules/creation/enabling_auto_update/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://devdocs.prestashop.com/1.7/modules/creation/enabling_auto_update/</guid>
      <description>Enabling the Auto-Update Since PrestaShop 1.5, it is possible to have your module auto-update: once a new version is available on Addons, PrestaShop suggests an &amp;ldquo;Update it!&amp;rdquo; button to the user. Clicking this button will trigger a series of methods, each leading closer to the latest version of your module.
In order to bring auto-update support to your module, you need three main things:
 Clearly indicate the module&amp;rsquo;s version number in its constructor method: $this-&amp;gt;version = &#39;1.</description>
    </item>
    
    <item>
      <title>Module translation</title>
      <link>http://devdocs.prestashop.com/1.7/modules/creation/module_translation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://devdocs.prestashop.com/1.7/modules/creation/module_translation/</guid>
      <description>Module translation The module&amp;rsquo;s text strings are written in English, but you might want French, Spanish or Polish shop owners to use your module too. You therefore have to translate those strings into those languages, both the front office and the back office strings. Ideally, you should translate your module in all the languages that are installed on your shop. This could be a tedious task, but a whole system has been put in place in order to help you out.</description>
    </item>
    
    <item>
      <title>Native module translation</title>
      <link>http://devdocs.prestashop.com/1.7/development/native_module_translation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://devdocs.prestashop.com/1.7/development/native_module_translation/</guid>
      <description>Module translation The module&amp;rsquo;s text strings are written in English, but you might want French, Spanish or Polish shop owners to use your module too. You therefore have to translate those strings into those languages, both the front office and the back office strings. Ideally, you should translate your module in all the languages that are installed on your shop. This could be a tedious task, but a whole system has been put in place in order to help you out.</description>
    </item>
    
    <item>
      <title>Configuration</title>
      <link>http://devdocs.prestashop.com/1.7/basics/installation/configuration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://devdocs.prestashop.com/1.7/basics/installation/configuration/</guid>
      <description>Configuring PrestaShop By default, PrestaShop is configured to provide a secure and stable environment to both the shop administrator and the customers.
As a developer, there are several changes that you could and should bring to the default installation in order to help you code better, spot bugs faster, and generally make a great PrestaShop product.
Disabling the cache and forcing Smarty compilation When your development has an impact on the front office, whether you are building a theme or simply a module which displays information to the customer, you should force the template file compilation and disable the cache, so as to always see the result of your changes directly.</description>
    </item>
    
    <item>
      <title>Commits &amp; Pull Requests</title>
      <link>http://devdocs.prestashop.com/1.7/development/coding_standards/commits_and_pull_requests/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://devdocs.prestashop.com/1.7/development/coding_standards/commits_and_pull_requests/</guid>
      <description>Commits &amp;amp; Pull Requests conventions Commits In the past, we used to have only one commit by pull request. This was a bad habit. We now require contributors to make atomic commits, so you will surely have more than one commit in a single pull request. This will be helpful to review, cherry-pick or revert (we hope to never have to do that 😉) the changes.
What&amp;rsquo;s an atomic commit?</description>
    </item>
    
    <item>
      <title>Migrating from PrestaShop 1.6</title>
      <link>http://devdocs.prestashop.com/1.7/themes/migration_from_16/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://devdocs.prestashop.com/1.7/themes/migration_from_16/</guid>
      <description>Migrating from PrestaShop 1.6 PrestaShop 1.7 introduces a totally reworked theme system from version 1.6, with the goal of making PrestaShop upgrades easier, and making it easier and faster to create a brand new theme.
The huge change to the theme system means that there is no easy way to migrate your PrestaShop 1.6 theme to PrestaShop 1.7.
When using the automatic upgrade from PrestaShop 1.6 to 1.7, your theme will be switched to the new default theme, called &amp;ldquo;Classic&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>RTL support</title>
      <link>http://devdocs.prestashop.com/1.7/themes/rtl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://devdocs.prestashop.com/1.7/themes/rtl/</guid>
      <description>RTL support PrestaShop supports RTL (Right-to-left) themes natively.
RTL stylesheets There are two ways of customizing your theme for RTL: either by adding an override file that is only loaded for RTL languages, or by using completely different version of the theme&amp;rsquo;s stylesheets.
CSS override file PrestaShop will try to load a css file named rtl.css after your theme&amp;rsquo;s ones when displayed in an RTL language. You can use this file to place any style override you need for RTL.</description>
    </item>
    
    <item>
      <title>Setting up your local environment</title>
      <link>http://devdocs.prestashop.com/1.7/themes/getting_started/setting_up_your_local_environment/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://devdocs.prestashop.com/1.7/themes/getting_started/setting_up_your_local_environment/</guid>
      <description>Setting up your local environment Now that you intend to building a theme for PrestaShop, you are better off keeping all your development work on your machine. The main advantage is that it makes it possible for you to entirely bypass the process of uploading your files on your online server in order to test your changes. Another advantage is that a local test environment enables you to test code without the risk of breaking your production store.</description>
    </item>
    
    <item>
      <title>The PrestaShop architecture</title>
      <link>http://devdocs.prestashop.com/1.7/development/prestashop_architecture/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://devdocs.prestashop.com/1.7/development/prestashop_architecture/</guid>
      <description>The PrestaShop architecture The PrestaShop developers have done their best to clearly and intuitively separate the various parts of the software.
Here is how the files are organized:
 /admin (the name is customized on installation): contains all the PrestaShop files pertaining to the back office. When accessing this folder with your browser, you will be asked to provide proper identification, for security reasons. Important: you should make sure to protect that folder with a .</description>
    </item>
    
  </channel>
</rss>